#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Message Queue –¥–ª—è Yandex Cloud Functions
–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–º –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å
"""

from message_queue_processor import MessageQueueProcessor


def handler(event, context):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ Message Queue
    
    Args:
        event: –°–æ–±—ã—Ç–∏–µ –æ—Ç Message Queue
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç Message Queue —Ç—Ä–∏–≥–≥–µ—Ä–∞")
    print(f"üì® –°–æ–±—ã—Ç–∏–µ: {event}")
    print(f"üîß –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        processor = MessageQueueProcessor()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        result = processor.process_book_from_queue(event, context)
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}")
        return result
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
        import traceback
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        return {
            'statusCode': 500,
            'body': f'Critical error: {str(e)}'
        }


if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_event = {
        'messages': [
            {
                'data': '{"user_id": 12345, "chat_id": 12345, "epub_path": "/tmp/test.epub", "sending_mode": "by_sense", "token": "test_token"}'
            }
        ]
    }
    
    test_context = {}
    
    result = handler(test_event, test_context)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {result}")