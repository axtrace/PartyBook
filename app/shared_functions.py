#!/usr/bin/env python3
"""
–û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–∏–≥–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import config
from books_library import BooksLibrary
from book_reader import BookReader


def book_finished(portion):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –ª–∏ –∫–Ω–∏–≥–∞"""
    if config.end_book_string in portion:
        return True
    if portion == '/more':
        return True
    return False


def turn_off_autostatus(user_id, chat_id, bot):
    """–û—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫—É –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏"""
    books_lib = BooksLibrary()
    if books_lib.get_auto_status(user_id):
        books_lib.switch_auto_status(user_id)
        lang = books_lib.get_lang(user_id)
        if lang not in config.message_everyday_OFF:
            lang = 'ru'  # Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
        auto_off_msg = config.message_everyday_OFF[lang]
        from telebot.types import ReplyKeyboardMarkup
        user_markup = ReplyKeyboardMarkup(True, one_time_keyboard=True)
        user_markup.row('/start_auto', '/my_books')
        bot.send_message(chat_id, auto_off_msg, reply_markup=user_markup)


def send_portion(user_id, chat_id, bot=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —á–∞–Ω–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –ï—Å–ª–∏ bot=None, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ—Ä–µ–∑ requests (–¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏)
    """
    books_lib = BooksLibrary()
    book_reader = BookReader()
    
    try:
        if bot:
            bot.send_chat_action(chat_id, 'typing')
        
        lang = books_lib.get_lang(user_id)
        if lang not in config.error_user_finding:
            lang = 'ru'  # Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
        
        msg = book_reader.get_next_portion(user_id)
        
        if msg is None:
            msg = config.error_user_finding[lang]
            if bot:
                bot.send_message(chat_id, msg)
            else:
                # –î–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ requests
                return {'success': False, 'reason': 'no_active_book', 'message': msg}
            return -1
            
        if book_finished(msg):
            finished_text = config.message_book_finished[lang]
            msg += f"\n{finished_text}\n/start_auto\n/my_books"
            if bot:
                turn_off_autostatus(user_id, chat_id, bot)
            else:
                # –î–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏ - –æ—Ç–∫–ª—é—á–∞–µ–º —á–µ—Ä–µ–∑ DbManager
                from db_manager import DbManager
                db = DbManager()
                db.update_auto_status(user_id, False)
                print(f"üìö –ö–Ω–∏–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        else:
            msg += '\n/more'
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if bot:
            # –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ bot
            max_telegram_size = 4096
            for i in range(0, len(msg), max_telegram_size):
                bot.send_message(chat_id, msg[i:i+max_telegram_size])
        else:
            # –î–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ requests
            return {'success': True, 'message': msg}
            
        return 0
    except Exception as e:
        if bot:
            bot.send_message(chat_id, f"Error: {str(e)}")
        else:
            return {'success': False, 'error': str(e)}
        return -1
