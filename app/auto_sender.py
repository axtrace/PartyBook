#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–∞–Ω–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
"""

import os
import json
import requests
from datetime import datetime
from db_manager import DbManager
from shared_functions import send_portion
import config


class AutoSender:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞–Ω–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    def __init__(self):
        self.db = DbManager()
        self.bot_token = os.environ.get('TOKEN')
        if not self.bot_token:
            raise ValueError("TOKEN environment variable not set")
    
    def get_users_for_auto_send_by_time(self, current_time):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ –∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            current_time: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (datetime)
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
        """
        return self.db.get_users_for_auto_send_by_time(current_time)
    
    def send_portion_to_user(self, user_id, chat_id, lang='ru'):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —á–∞–Ω–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é send_portion –∏–∑ shared_functions
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: ID —á–∞—Ç–∞
            lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é send_portion (bot=None –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏)
            result = send_portion(user_id, chat_id, bot=None)
            
            if isinstance(result, dict):
                # –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏
                if result['success']:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
                    self._send_telegram_message(chat_id, result['message'])
                    print(f"‚úÖ –ß–∞–Ω–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    return {'success': True}
                else:
                    # –û—à–∏–±–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    if 'message' in result:
                        self._send_telegram_message(chat_id, result['message'])
                    return result
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (0/-1)
                if result == 0:
                    return {'success': True}
                else:
                    return {'success': False, 'reason': 'unknown_error'}
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return {'success': False, 'error': str(e)}
    
    def _send_telegram_message(self, chat_id, text):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
        max_telegram_size = 4096
        for i in range(0, len(text), max_telegram_size):
            chunk = text[i:i+max_telegram_size]
            
            payload = {
                'chat_id': chat_id,
                'text': chunk,
                'parse_mode': 'HTML'
            }
            
            try:
                response = requests.post(url, json=payload, timeout=10)
                response.raise_for_status()
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
                raise
    
    
    def process_auto_send(self, current_time):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏
        
        Args:
            current_time: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫—É –≤ {current_time.strftime('%H:%M')}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        users = self.get_users_for_auto_send_by_time(current_time)
        
        if not users:
            print("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏")
            return {
                'success': True,
                'users_processed': 0,
                'successful_sends': 0,
                'errors': 0
            }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        successful_sends = 0
        errors = 0
        
        for user in users:
            try:
                result = self.send_portion_to_user(
                    user['user_id'], 
                    user['chat_id'], 
                    user['lang']
                )
                
                if result['success']:
                    successful_sends += 1
                else:
                    errors += 1
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {result.get('reason', 'unknown')}")
                    
            except Exception as e:
                errors += 1
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}: {e}")
        
        stats = {
            'success': True,
            'users_processed': len(users),
            'successful_sends': successful_sends,
            'errors': errors,
            'current_time': current_time.isoformat(),
            'time_slot': current_time.strftime('%H:%M')
        }
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏: {stats}")
        return stats


def handler(event, context):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏
    
    Args:
        event: –°–æ–±—ã—Ç–∏–µ –æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏: {event}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        auto_sender = AutoSender()
        result = auto_sender.process_auto_send(current_time)
        
        print(f"‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}")
        return {
            'statusCode': 200,
            'body': json.dumps(result)
        }
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
        import traceback
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }


if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_event = {}
    test_context = {}
    
    result = handler(test_event, test_context)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {result}")
