#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–∞–Ω–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
"""

import os
import json
import requests
from datetime import datetime, timedelta
from db_manager import DbManager
from books_library import BooksLibrary
from txt_file import BookChunkManager
import config


class AutoSender:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞–Ω–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    def __init__(self):
        self.db = DbManager()
        self.books_lib = BooksLibrary()
        self.chunk_manager = BookChunkManager()
        self.bot_token = os.environ.get('TOKEN')
        if not self.bot_token:
            raise ValueError("TOKEN environment variable not set")
    
    def get_users_for_auto_send_by_time(self, last_run_time, current_time):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            last_run_time: –í—Ä–µ–º—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ (datetime)
            current_time: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (datetime)
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
        """
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        last_run_str = last_run_time.strftime("%H:%M")
        current_run_str = current_time.strftime("%H:%M")
        
        query = f"""
            SELECT userId, chatId, lang, time FROM users
            WHERE isAutoSend = true 
            AND time != ""
            AND time >= "{last_run_str}"
            AND time <= "{current_run_str}";
        """
        
        result = self.db.db_adapter.execute_query(query)
        users = []
        
        if result and len(result[0].rows) > 0:
            for row in result[0].rows:
                try:
                    data = self.db._text_to_json(str(row))
                    users.append({
                        'user_id': data['userId'],
                        'chat_id': data['chatId'],
                        'lang': data.get('lang', 'ru'),
                        'time': data['time']
                    })
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                    continue
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏")
        return users
    
    def send_portion_to_user(self, user_id, chat_id, lang='ru'):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —á–∞–Ω–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: ID —á–∞—Ç–∞
            lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∫–Ω–∏–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            book_info = self.books_lib.get_current_book(user_id)
            if not book_info or len(book_info) < 3:
                # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–∏–≥–∏
                error_msg = config.error_user_finding.get(lang, config.error_user_finding['ru'])
                self._send_telegram_message(chat_id, error_msg)
                return {'success': False, 'reason': 'no_active_book'}
            
            book_id, book_name, pos = book_info[0], book_info[1], book_info[2]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —á–∞–Ω–∫ —Ç–µ–∫—Å—Ç–∞
            text_piece, new_pos = self.chunk_manager.read_piece(book_id, pos)
            
            # –ï—Å–ª–∏ —á–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∫–Ω–∏–≥–∞
            if text_piece is None:
                total_chunks = self.chunk_manager.get_total_chunks(book_id)
                if pos >= total_chunks:
                    # –ö–Ω–∏–≥–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞
                    finished_text = config.message_book_finished.get(lang, config.message_book_finished['ru'])
                    msg = config.end_book_string + f"\n{finished_text}\n/start_auto\n/my_books"
                    
                    # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫—É
                    self.db.update_auto_status(user_id, False)
                    print(f"üìö –ö–Ω–∏–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                    
                    self._send_telegram_message(chat_id, msg)
                    return {'success': True, 'reason': 'book_finished'}
                else:
                    # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞–Ω–∫–∞
                    error_msg = config.error_user_finding.get(lang, config.error_user_finding['ru'])
                    self._send_telegram_message(chat_id, error_msg)
                    return {'success': False, 'reason': 'chunk_error'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –ª–∏ –∫–Ω–∏–≥–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            if text_piece == config.end_book_string:
                finished_text = config.message_book_finished.get(lang, config.message_book_finished['ru'])
                msg = text_piece + f"\n{finished_text}\n/start_auto\n/my_books"
                
                # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫—É
                self.db.update_auto_status(user_id, False)
                print(f"üìö –ö–Ω–∏–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                
                self._send_telegram_message(chat_id, msg)
                return {'success': True, 'reason': 'book_finished'}
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫
            self._send_telegram_message(chat_id, text_piece)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –∫–Ω–∏–≥–µ
            self.books_lib.update_book_pos(user_id, book_id, new_pos)
            
            print(f"‚úÖ –ß–∞–Ω–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, —Å–ª–µ–¥—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {new_pos}")
            return {'success': True, 'next_pos': new_pos}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return {'success': False, 'error': str(e)}
    
    def _send_telegram_message(self, chat_id, text):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
        max_telegram_size = 4096
        for i in range(0, len(text), max_telegram_size):
            chunk = text[i:i+max_telegram_size]
            
            payload = {
                'chat_id': chat_id,
                'text': chunk,
                'parse_mode': 'HTML'
            }
            
            try:
                response = requests.post(url, json=payload, timeout=10)
                response.raise_for_status()
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {e}")
                raise
    
    
    def process_auto_send(self, last_run_time, current_time):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏
        
        Args:
            last_run_time: –í—Ä–µ–º—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            current_time: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫—É —Å {last_run_time} –ø–æ {current_time}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        users = self.get_users_for_auto_send_by_time(last_run_time, current_time)
        
        if not users:
            print("üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏")
            return {
                'success': True,
                'users_processed': 0,
                'successful_sends': 0,
                'errors': 0
            }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        successful_sends = 0
        errors = 0
        
        for user in users:
            try:
                result = self.send_portion_to_user(
                    user['user_id'], 
                    user['chat_id'], 
                    user['lang']
                )
                
                if result['success']:
                    successful_sends += 1
                else:
                    errors += 1
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {result.get('reason', 'unknown')}")
                    
            except Exception as e:
                errors += 1
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}: {e}")
        
        stats = {
            'success': True,
            'users_processed': len(users),
            'successful_sends': successful_sends,
            'errors': errors,
            'last_run_time': last_run_time.isoformat(),
            'current_time': current_time.isoformat()
        }
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏: {stats}")
        return stats


def handler(event, context):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏
    
    Args:
        event: –°–æ–±—ã—Ç–∏–µ –æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å last_run_time)
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏: {event}")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        if 'last_run_time' in event:
            last_run_time = datetime.fromisoformat(event['last_run_time'])
        else:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –±–µ—Ä–µ–º —á–∞—Å –Ω–∞–∑–∞–¥
            last_run_time = datetime.now() - timedelta(hours=1)
        
        current_time = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        auto_sender = AutoSender()
        result = auto_sender.process_auto_send(last_run_time, current_time)
        
        print(f"‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}")
        return {
            'statusCode': 200,
            'body': json.dumps(result)
        }
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
        import traceback
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }


if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_event = {
        'last_run_time': (datetime.now() - timedelta(hours=1)).isoformat()
    }
    
    test_context = {}
    
    result = handler(test_event, test_context)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {result}")
