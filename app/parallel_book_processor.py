#!/usr/bin/env python3
"""
–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–Ω–∏–≥ –¥–ª—è Yandex Cloud Functions
–†–∞–∑–±–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–∏–≥–∏ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
"""

import json
import os
import uuid
from epub_reader import EpubReader
from db_manager import DbManager
from text_transliter import TextTransliter
from queue_sender import QueueSender


class ParallelBookProcessor(object):
    """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–∏–≥"""

    def __init__(self):
        self.db = DbManager()
        self.transliter = TextTransliter()
        self.queue_sender = QueueSender()

    def _make_filename(self, user_id, book_title):
        """Create filename for book based on user_id and title"""
        trans_title = self.transliter.translite_text(book_title)
        trans_title = trans_title.replace(" ", "_").lower()
        filename = str(user_id) + '_' + trans_title
        return filename

    def _send_telegram_notification(self, chat_id, message, token):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
        try:
            import requests
            url = f"https://api.telegram.org/bot{token}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            response = requests.post(url, data=data)
            if response.status_code == 200:
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def start_parallel_processing(self, user_id, chat_id, epub_path, sending_mode, token):
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–∏–≥–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            epub_path: –ü—É—Ç—å –∫ EPUB —Ñ–∞–π–ª—É
            sending_mode: –†–µ–∂–∏–º —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
            token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        try:
            print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_id = str(uuid.uuid4())
            print(f"üÜî ID –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_id}")
            
            # –ß–∏—Ç–∞–µ–º EPUB —Ñ–∞–π–ª
            self._send_telegram_notification(
                chat_id,
                f"üìñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–Ω–∏–≥–∏...",
                token
            )
            
            book_reader = EpubReader(epub_path)
            book_title = book_reader.get_booktitle()
            
            if not book_title:
                self._send_telegram_notification(
                    chat_id,
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏",
                    token
                )
                return {'success': False, 'error': 'Could not extract book title'}
            
            print(f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: {book_title}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É –≤ –ë–î
            book_name = self._make_filename(user_id, book_title)
            book_id = self.db.get_or_create_book(book_name)
            
            if book_id is None:
                self._send_telegram_notification(
                    chat_id,
                    f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î",
                    token
                )
                return {'success': False, 'error': 'Could not create book in DB'}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏
            all_text_blocks = []
            while True:
                text = book_reader.get_next_item_text()
                if text is None:
                    break
                if text.strip():  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –±–ª–æ–∫–∏
                    all_text_blocks.append(text)
            
            total_blocks = len(all_text_blocks)
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {total_blocks} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤")
            
            if total_blocks == 0:
                self._send_telegram_notification(
                    chat_id,
                    f"‚ùå –í –∫–Ω–∏–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ",
                    token
                )
                return {'success': False, 'error': 'No text content found'}
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            batch_size = 10  # –ü–æ 10 –±–ª–æ–∫–æ–≤ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é
            batches = []
            for i in range(0, total_blocks, batch_size):
                batch_blocks = all_text_blocks[i:i + batch_size]
                batch_id = f"{processing_id}_batch_{i // batch_size}"
                batches.append({
                    'batch_id': batch_id,
                    'blocks': batch_blocks,
                    'start_index': i,
                    'end_index': min(i + batch_size - 1, total_blocks - 1)
                })
            
            print(f"üì¶ –°–æ–∑–¥–∞–Ω–æ {len(batches)} –±–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ë–î
            processing_metadata = {
                'processing_id': processing_id,
                'user_id': user_id,
                'chat_id': chat_id,
                'book_id': book_id,
                'book_title': book_title,
                'total_blocks': total_blocks,
                'total_batches': len(batches),
                'completed_batches': 0,
                'sending_mode': sending_mode,
                'token': token,
                'status': 'processing',
                'batches': [batch['batch_id'] for batch in batches]
            }
            
            self._save_processing_metadata(processing_id, processing_metadata)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self._send_telegram_notification(
                chat_id,
                f"üìö <b>{book_title}</b>\n"
                f"üìä –ù–∞–π–¥–µ–Ω–æ {total_blocks} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤\n"
                f"üì¶ –†–∞–∑–±–∏—Ç–æ –Ω–∞ {len(batches)} —á–∞—Å—Ç–µ–π –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
                f"‚ö° –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...",
                token
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            for batch in batches:
                self._send_batch_to_queue(processing_id, batch, book_id, sending_mode, token)
            
            return {
                'success': True,
                'processing_id': processing_id,
                'book_id': book_id,
                'total_batches': len(batches),
                'total_blocks': total_blocks
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            import traceback
            print(f"‚ùå Traceback: {traceback.format_exc()}")
            return {'success': False, 'error': str(e)}

    def _save_processing_metadata(self, processing_id, metadata):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ë–î"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            create_table_query = """
                CREATE TABLE IF NOT EXISTS processing_metadata (
                    processing_id Utf8,
                    metadata Json,
                    created_at Timestamp,
                    PRIMARY KEY (processing_id)
                );
            """
            self.db.db_adapter.execute_query(create_table_query)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            insert_query = f"""
                INSERT INTO processing_metadata (processing_id, metadata, created_at)
                VALUES ('{processing_id}', '{json.dumps(metadata)}', CurrentUtcTimestamp());
            """
            self.db.db_adapter.execute_query(insert_query)
            print(f"üíæ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {processing_id}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")

    def _get_processing_metadata(self, processing_id):
        """–ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ –ë–î"""
        try:
            query = f"""
                SELECT metadata FROM processing_metadata
                WHERE processing_id = '{processing_id}';
            """
            result = self.db.db_adapter.execute_query(query)
            if result and len(result[0].rows) > 0:
                metadata_str = str(result[0].rows[0][0])
                return json.loads(metadata_str)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

    def _update_processing_progress(self, processing_id, completed_batches):
        """–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            metadata = self._get_processing_metadata(processing_id)
            if metadata:
                metadata['completed_batches'] = completed_batches
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
                if completed_batches >= metadata['total_batches']:
                    metadata['status'] = 'completed'
                    self._send_telegram_notification(
                        metadata['chat_id'],
                        f"üéâ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
                        f"üìö –ö–Ω–∏–≥–∞: {metadata['book_title']}\n"
                        f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–ª–æ–∫–æ–≤: {metadata['total_blocks']}\n"
                        f"üíæ –ö–Ω–∏–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à—É –±–∏–±–ª–∏–æ—Ç–µ–∫—É!\n"
                        f"üìñ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —á–∏—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /more",
                        metadata['token']
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    from books_library import BooksLibrary
                    books_lib = BooksLibrary()
                    books_lib.update_current_book(metadata['user_id'], metadata['chat_id'], metadata['book_id'])
                    books_lib.update_book_pos(metadata['user_id'], metadata['book_id'], 0)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                update_query = f"""
                    UPDATE processing_metadata
                    SET metadata = '{json.dumps(metadata)}'
                    WHERE processing_id = '{processing_id}';
                """
                self.db.db_adapter.execute_query(update_query)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                if completed_batches < metadata['total_batches']:
                    progress_percent = (completed_batches / metadata['total_batches']) * 100
                    self._send_telegram_notification(
                        metadata['chat_id'],
                        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed_batches}/{metadata['total_batches']} ({progress_percent:.1f}%)\n"
                        f"‚ö° –ü—Ä–æ–¥–æ–ª–∂–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...",
                        metadata['token']
                    )
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

    def _send_batch_to_queue(self, processing_id, batch, book_id, sending_mode, token):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            batch_message = {
                'type': 'process_batch',
                'processing_id': processing_id,
                'batch_id': batch['batch_id'],
                'book_id': book_id,
                'blocks': batch['blocks'],
                'start_index': batch['start_index'],
                'end_index': batch['end_index'],
                'sending_mode': sending_mode,
                'token': token
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π QueueSender)
            success = self.queue_sender.send_batch_processing_message(batch_message)
            
            if success:
                print(f"‚úÖ –ë–∞—Ç—á {batch['batch_id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞—Ç—á–∞ {batch['batch_id']} –≤ –æ—á–µ—Ä–µ–¥—å")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞—Ç—á–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")

    def handle_batch_completion(self, processing_id, batch_id, chunks_created):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞
        
        Args:
            processing_id: ID –æ–±—Ä–∞–±–æ—Ç–∫–∏
            batch_id: ID –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –±–∞—Ç—á–∞
            chunks_created: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
        """
        try:
            print(f"‚úÖ –ë–∞—Ç—á {batch_id} –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {chunks_created}")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            metadata = self._get_processing_metadata(processing_id)
            if not metadata:
                print(f"‚ùå –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {processing_id}")
                return
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –±–∞—Ç—á–µ–π
            completed_batches = metadata.get('completed_batches', 0) + 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            self._update_processing_progress(processing_id, completed_batches)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞—Ç—á–∞: {e}")


