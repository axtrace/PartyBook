import json
import boto3
import os
from botocore.exceptions import ClientError


class QueueSender(object):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Message Queue –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–∏–≥"""

    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Yandex Message Queue
        self.queue_url = os.environ.get('MESSAGE_QUEUE_URL')
        self.aws_access_key_id = os.environ.get('AWS_ACCESS_KEY_ID')
        self.aws_secret_access_key = os.environ.get('AWS_SECRET_ACCESS_KEY')
        self.region_name = os.environ.get('AWS_REGION', 'ru-central1')
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç SQS (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å Yandex Message Queue)
        self.sqs_client = boto3.client(
            'sqs',
            endpoint_url='https://message-queue.api.cloud.yandex.net',
            aws_access_key_id=self.aws_access_key_id,
            aws_secret_access_key=self.aws_secret_access_key,
            region_name=self.region_name
        )

    def send_book_processing_message(self, user_id, chat_id, epub_path, sending_mode, token):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–∏–≥–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: ID —á–∞—Ç–∞
            epub_path: –ü—É—Ç—å –∫ EPUB —Ñ–∞–π–ª—É
            sending_mode: –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
            token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not self.queue_url:
                print(f"‚ùå MESSAGE_QUEUE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_data = {
                'user_id': user_id,
                'chat_id': chat_id,
                'epub_path': epub_path,
                'sending_mode': sending_mode,
                'token': token,
                'timestamp': str(int(time.time()))
            }
            
            message_body = json.dumps(message_data)
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å: {self.queue_url}")
            print(f"üì® –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = self.sqs_client.send_message(
                QueueUrl=self.queue_url,
                MessageBody=message_body,
                MessageAttributes={
                    'MessageType': {
                        'StringValue': 'book_processing',
                        'DataType': 'String'
                    },
                    'UserId': {
                        'StringValue': str(user_id),
                        'DataType': 'String'
                    }
                }
            )
            
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {response['MessageId']}")
            return True
            
        except ClientError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

    def send_batch_processing_message(self, batch_data):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞
        
        Args:
            batch_data: –î–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not self.queue_url:
                print(f"‚ùå MESSAGE_QUEUE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp
            batch_data['timestamp'] = str(int(time.time()))
            
            message_body = json.dumps(batch_data)
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á –≤ –æ—á–µ—Ä–µ–¥—å: {batch_data.get('batch_id')}")
            print(f"üì¶ –ë–∞—Ç—á —Å–æ–¥–µ—Ä–∂–∏—Ç {len(batch_data.get('blocks', []))} –±–ª–æ–∫–æ–≤")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = self.sqs_client.send_message(
                QueueUrl=self.queue_url,
                MessageBody=message_body,
                MessageAttributes={
                    'MessageType': {
                        'StringValue': 'batch_processing',
                        'DataType': 'String'
                    },
                    'ProcessingId': {
                        'StringValue': batch_data.get('processing_id', 'unknown'),
                        'DataType': 'String'
                    },
                    'BatchId': {
                        'StringValue': batch_data.get('batch_id', 'unknown'),
                        'DataType': 'String'
                    }
                }
            )
            
            print(f"‚úÖ –ë–∞—Ç—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ: {response['MessageId']}")
            return True
            
        except ClientError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞—Ç—á–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∞—Ç—á–∞: {e}")
            return False

    def send_test_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            test_data = {
                'user_id': 12345,
                'chat_id': 12345,
                'epub_path': '/tmp/test.epub',
                'sending_mode': 'by_sense',
                'token': 'test_token',
                'timestamp': str(int(time.time()))
            }
            
            message_body = json.dumps(test_data)
            
            response = self.sqs_client.send_message(
                QueueUrl=self.queue_url,
                MessageBody=message_body
            )
            
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response['MessageId']}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º time –¥–ª—è timestamp
import time

