from epub_processor import EpubProcessor
from async_epub_processor import AsyncEpubProcessor
from queue_sender import QueueSender
from books_library import BooksLibrary
from db_manager import DbManager
import os


class BookAdder(object):
    """add new book to user's library"""

    def __init__(self):
        self.books_lib = BooksLibrary()
        self.epub_processor = EpubProcessor()
        self.async_epub_processor = AsyncEpubProcessor()
        self.queue_sender = QueueSender()
        self.db = DbManager()

    def add_new_book(self, user_id, chat_id, epub_path, sending_mode, bot=None):
        """
        Add new book to processing queue for asynchronous processing
        
        Args:
            user_id: ID of the user
            chat_id: Chat ID for database updates
            epub_path: Path to the EPUB file
            sending_mode: Mode for text separation ('by_sense' or 'by_newline')
            bot: Telegram bot instance for sending progress messages
            
        Returns:
            book_id: ID of the created book, or -1 if error
        """
        try:
            print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            token = os.environ.get('TOKEN')
            if not token:
                print(f"‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                return -1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ S3 –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            print(f"üì§ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ S3 –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            s3_path = self._upload_to_s3(epub_path, user_id)
            if not s3_path:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ S3")
                return -1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            success = self.queue_sender.send_book_processing_message(
                user_id, chat_id, s3_path, sending_mode, token
            )
            
            if not success:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å")
                return -1
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –æ –∫–Ω–∏–≥–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            from epub_reader import EpubReader
            book_reader = EpubReader(epub_path)
            book_title = book_reader.get_booktitle()
            
            if book_title:
                book_name = self._make_filename(user_id, book_title)
                book_id = self.db.get_or_create_book(book_name)
                
                if book_id:
                    print(f"‚úÖ –ö–Ω–∏–≥–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏, ID: {book_id}")
                    return book_id
            
            print(f"‚úÖ –ö–Ω–∏–≥–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return 1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É—Å–ø–µ—Ö–∞
            
        except Exception as e:
            print(f"Error adding new book to queue: {str(e)}")
            import traceback
            print(f"Traceback: {traceback.format_exc()}")
            return -1

    def _upload_to_s3(self, epub_path, user_id):
        """Upload EPUB file to S3 for asynchronous processing"""
        try:
            import s3_adapter
            s3a = s3_adapter.s3Adapter()
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            import uuid
            file_id = str(uuid.uuid4())
            s3_key = f"books/{user_id}/{file_id}.epub"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3
            success = s3a.upload_file(epub_path, s3_key)
            if success:
                print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3: {s3_key}")
                return s3_key
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ S3")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ S3: {e}")
            return None

    def _make_filename(self, user_id, book_title):
        """Create filename for book based on user_id and title"""
        from text_transliter import TextTransliter
        transliter = TextTransliter()
        trans_title = transliter.translite_text(book_title)
        trans_title = trans_title.replace(" ", "_").lower()
        filename = str(user_id) + '_' + trans_title
        return filename

