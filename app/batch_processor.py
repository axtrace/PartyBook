#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞—Ç—á–µ–π –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–∏–≥
–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –±–∞—Ç—á —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
"""

import json
import os
from txt_file import BookChunkManager
from parallel_book_processor import ParallelBookProcessor


class BatchProcessor(object):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤"""

    def __init__(self):
        self.chunk_manager = BookChunkManager()
        self.parallel_processor = ParallelBookProcessor()

    def process_batch(self, batch_data):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –±–∞—Ç—á —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
        
        Args:
            batch_data: –î–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞
        """
        try:
            print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞: {batch_data.get('batch_id')}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞—Ç—á–∞
            processing_id = batch_data.get('processing_id')
            batch_id = batch_data.get('batch_id')
            book_id = batch_data.get('book_id')
            blocks = batch_data.get('blocks', [])
            sending_mode = batch_data.get('sending_mode', 'by_sense')
            start_index = batch_data.get('start_index', 0)
            end_index = batch_data.get('end_index', 0)
            
            print(f"üìä –ë–∞—Ç—á {batch_id}: –±–ª–æ–∫–∏ {start_index}-{end_index}, –≤—Å–µ–≥–æ {len(blocks)} –±–ª–æ–∫–æ–≤")
            
            if not blocks:
                print(f"‚ö†Ô∏è –ë–∞—Ç—á {batch_id} –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return {
                    'success': True,
                    'batch_id': batch_id,
                    'chunks_created': 0,
                    'blocks_processed': 0
                }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫ –≤ –±–∞—Ç—á–µ
            total_chunks_created = 0
            blocks_processed = 0
            
            for i, text_block in enumerate(blocks):
                if text_block and text_block.strip():
                    try:
                        print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫ {start_index + i + 1} (–¥–ª–∏–Ω–∞: {len(text_block)} —Å–∏–º–≤–æ–ª–æ–≤)")
                        
                        # –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏ –∏–∑ –±–ª–æ–∫–∞
                        chunks_created = self.chunk_manager.create_chunks(book_id, text_block, sending_mode)
                        total_chunks_created += chunks_created
                        blocks_processed += 1
                        
                        print(f"‚úÖ –ë–ª–æ–∫ {start_index + i + 1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Å–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {chunks_created}")
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∞ {start_index + i + 1}: {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–æ–≤
                else:
                    print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –±–ª–æ–∫ {start_index + i + 1}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            
            print(f"‚úÖ –ë–∞—Ç—á {batch_id} –∑–∞–≤–µ—Ä—à–µ–Ω: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {blocks_processed} –±–ª–æ–∫–æ–≤, —Å–æ–∑–¥–∞–Ω–æ {total_chunks_created} —á–∞–Ω–∫–æ–≤")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–∞—Ç—á–∞
            self.parallel_processor.handle_batch_completion(processing_id, batch_id, total_chunks_created)
            
            return {
                'success': True,
                'batch_id': batch_id,
                'chunks_created': total_chunks_created,
                'blocks_processed': blocks_processed
            }
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ {batch_id}: {e}")
            import traceback
            print(f"‚ùå Traceback: {traceback.format_exc()}")
            return {
                'success': False,
                'batch_id': batch_id,
                'error': str(e)
            }

    def process_batch_from_queue(self, event, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞—Ç—á–∞—Ö –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –æ—Ç Message Queue
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç Message Queue: {event}")
            
            # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            if 'messages' in event:
                for message in event['messages']:
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Yandex Message Queue
                    if 'details' in message and 'message' in message['details'] and 'body' in message['details']['message']:
                        batch_data = json.loads(message['details']['message']['body'])
                    elif 'data' in message:
                        batch_data = json.loads(message['data'])
                    else:
                        print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {message}")
                        continue
                    
                    print(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á: {batch_data.get('batch_id')}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                    result = self.process_batch(batch_data)
                    
                    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞: {result}")
            
            return {'statusCode': 200, 'body': 'Batch processing completed'}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞—Ç—á–µ: {e}")
            import traceback
            print(f"‚ùå Traceback: {traceback.format_exc()}")
            return {'statusCode': 500, 'body': f'Error: {str(e)}'}


def handler(event, context):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–µ–π
    
    Args:
        event: –°–æ–±—ã—Ç–∏–µ –æ—Ç Message Queue —Å –¥–∞–Ω–Ω—ã–º–∏ –±–∞—Ç—á–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞")
    print(f"üì® –°–æ–±—ã—Ç–∏–µ: {event}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –±–∞—Ç—á–µ–π
        processor = BatchProcessor()
        
        # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        if 'messages' in event:
            for message in event['messages']:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Yandex Message Queue
                if 'details' in message and 'message' in message['details'] and 'body' in message['details']['message']:
                    batch_data = json.loads(message['details']['message']['body'])
                elif 'data' in message:
                    batch_data = json.loads(message['data'])
                else:
                    print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {message}")
                    continue
                
                print(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á: {batch_data.get('batch_id')}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                result = processor.process_batch(batch_data)
                
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞: {result}")
        
        return {'statusCode': 200, 'body': 'Batch processing completed'}
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –±–∞—Ç—á–µ–π: {e}")
        import traceback
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        return {
            'statusCode': 500,
            'body': f'Critical error: {str(e)}'
        }


if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_batch_data = {
        'processing_id': 'test-processing-123',
        'batch_id': 'test-processing-123_batch_0',
        'book_id': 1,
        'blocks': [
            '–≠—Ç–æ –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.',
            '–≠—Ç–æ –≤—Ç–æ—Ä–æ–π –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.',
            '–≠—Ç–æ —Ç—Ä–µ—Ç–∏–π –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'
        ],
        'start_index': 0,
        'end_index': 2,
        'sending_mode': 'by_sense',
        'token': 'test_token'
    }
    
    test_event = {
        'messages': [
            {
                'data': json.dumps(test_batch_data)
            }
        ]
    }
    
    test_context = {}
    
    result = handler(test_event, test_context)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {result}")
