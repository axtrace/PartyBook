import os
import json
from epub_reader import EpubReader
from txt_file import BookChunkManager
from db_manager import DbManager
from text_transliter import TextTransliter


class AsyncEpubProcessor(object):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä EPUB —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–ª–∞—á–Ω–æ–π —Å—Ä–µ–¥—ã"""

    def __init__(self):
        self.chunk_manager = BookChunkManager()
        self.db = DbManager()
        self.transliter = TextTransliter()

    def _make_filename(self, user_id, book_title):
        """Create filename for book based on user_id and title"""
        trans_title = self.transliter.translite_text(book_title)
        trans_title = trans_title.replace(" ", "_").lower()
        filename = str(user_id) + '_' + trans_title
        return filename

    def _send_progress_message(self, bot, chat_id, message):
        """Send progress message to Telegram chat"""
        if bot and chat_id:
            try:
                bot.send_chat_action(chat_id, 'typing')
                bot.send_message(chat_id, message)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

    def _save_processing_state(self, book_id, epub_path, processed_items, total_items, current_item_index):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ë–î"""
        state = {
            'epub_path': epub_path,
            'processed_items': processed_items,
            'total_items': total_items,
            'current_item_index': current_item_index,
            'status': 'processing'
        }
        
        query = f"""
            UPDATE books 
            SET processingState = '{json.dumps(state)}'
            WHERE id = {book_id};
        """
        
        try:
            self.db.db_adapter.execute_query(query)
            print(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {current_item_index}/{total_items}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    def _get_processing_state(self, book_id):
        """–ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ –ë–î"""
        query = f"""
            SELECT processingState FROM books
            WHERE id = {book_id};
        """
        
        try:
            result = self.db.db_adapter.execute_query(query)
            if result and len(result[0].rows) > 0:
                state_str = str(result[0].rows[0][0])
                if state_str and state_str != 'None':
                    return json.loads(state_str)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        
        return None

    def _clear_processing_state(self, book_id):
        """–û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        query = f"""
            UPDATE books 
            SET processingState = NULL
            WHERE id = {book_id};
        """
        
        try:
            self.db.db_adapter.execute_query(query)
            print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–∏—â–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    def start_epub_processing(self, user_id, epub_path, sending_mode='by_sense', bot=None, chat_id=None):
        """
        –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É EPUB —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤)
        """
        try:
            print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É EPUB: {epub_path}")
            
            # –ß–∏—Ç–∞–µ–º EPUB —Ñ–∞–π–ª
            book_reader = EpubReader(epub_path)
            book_title = book_reader.get_booktitle()
            print(f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: {book_title}")
            
            if not book_title:
                raise ValueError("Could not extract book title from EPUB")
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É –≤ –ë–î
            book_name = self._make_filename(user_id, book_title)
            book_id = self.db.get_or_create_book(book_name)
            
            if book_id is None:
                raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É: {book_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            total_items = len(book_reader.item_ids)
            print(f"üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_items}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self._send_progress_message(bot, chat_id, 
                f"üìö –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–∏–≥–∏: {book_title}\nüìä –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {total_items}\n‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._save_processing_state(book_id, epub_path, [], total_items, 0)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –±–∞—Ç—á
            return self.continue_epub_processing(book_id, sending_mode, bot, chat_id)
            
        except Exception as e:
            print(f"‚ùå Error starting EPUB processing: {str(e)}")
            import traceback
            print(f"‚ùå Traceback: {traceback.format_exc()}")
            return None

    def continue_epub_processing(self, book_id, sending_mode='by_sense', bot=None, chat_id=None):
        """
        –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É EPUB —Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –≤—ã–∑–æ–≤—ã)
        """
        try:
            print(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–∏–≥–∏ ID: {book_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            state = self._get_processing_state(book_id)
            if not state:
                print(f"‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∫–Ω–∏–≥–∏ {book_id}")
                return None
            
            epub_path = state['epub_path']
            processed_items = state['processed_items']
            total_items = state['total_items']
            current_item_index = state['current_item_index']
            
            print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {current_item_index}/{total_items} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π reader –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            book_reader = EpubReader(epub_path)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for i in range(current_item_index):
                if len(book_reader.item_ids) > 0:
                    book_reader.item_ids.pop(0)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 5 –∑–∞ —Ä–∞–∑)
            batch_size = 5
            processed_in_batch = 0
            total_chunks_created = 0
            
            while (len(book_reader.item_ids) > 0 and 
                   processed_in_batch < batch_size and 
                   current_item_index < total_items):
                
                print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç {current_item_index + 1}/{total_items}")
                
                text = book_reader.get_next_item_text()
                if text and text.strip():
                    try:
                        chunks_created = self.chunk_manager.create_chunks(book_id, text, sending_mode)
                        total_chunks_created += chunks_created
                        processed_items.append(current_item_index)
                        processed_in_batch += 1
                        current_item_index += 1
                        
                        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω —ç–ª–µ–º–µ–Ω—Ç {current_item_index}, —Å–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {chunks_created}")
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ {current_item_index}: {e}")
                        current_item_index += 1
                else:
                    print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç {current_item_index}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    current_item_index += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
            if current_item_index >= total_items:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                self._clear_processing_state(book_id)
                self._send_progress_message(bot, chat_id, 
                    f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–∏–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {total_items}\nüìö –°–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {total_chunks_created}")
                print(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–∏–≥–∏ {book_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                return book_id
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤—ã–∑–æ–≤
                self._save_processing_state(book_id, epub_path, processed_items, total_items, current_item_index)
                
                progress_percent = (current_item_index / total_items) * 100
                self._send_progress_message(bot, chat_id, 
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {current_item_index}/{total_items} ({progress_percent:.1f}%)\n‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
                
                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —ç—Ç–æ–º –±–∞—Ç—á–µ: {processed_in_batch}, –≤—Å–µ–≥–æ: {current_item_index}/{total_items}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º book_id –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                return book_id
                
        except Exception as e:
            print(f"‚ùå Error continuing EPUB processing: {str(e)}")
            import traceback
            print(f"‚ùå Traceback: {traceback.format_exc()}")
            return None

    def process_epub_async(self, user_id, epub_path, sending_mode='by_sense', bot=None, chat_id=None):
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ EPUB
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω–∞—á–∏–Ω–∞—Ç—å –ª–∏ –Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–º—è –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            book_reader = EpubReader(epub_path)
            book_title = book_reader.get_booktitle()
            book_name = self._make_filename(user_id, book_title)
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–∏–≥—É
            book_id = self.db.get_or_create_book(book_name)
            
            if book_id is None:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É: {book_name}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            state = self._get_processing_state(book_id)
            
            if state and state.get('status') == 'processing':
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                print(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–∏–≥–∏ {book_id}")
                return self.continue_epub_processing(book_id, sending_mode, bot, chat_id)
            else:
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–∏–≥–∏ {book_id}")
                return self.start_epub_processing(user_id, epub_path, sending_mode, bot, chat_id)
                
        except Exception as e:
            print(f"‚ùå Error in async EPUB processing: {str(e)}")
            import traceback
            print(f"‚ùå Traceback: {traceback.format_exc()}")
            return None
