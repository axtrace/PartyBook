import json
import os
import boto3
from epub_reader import EpubReader
from txt_file import BookChunkManager
from db_manager import DbManager
from text_transliter import TextTransliter


class MessageQueueProcessor(object):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Message Queue –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–∏–≥"""

    def __init__(self):
        self.chunk_manager = BookChunkManager()
        self.db = DbManager()
        self.transliter = TextTransliter()

    def _make_filename(self, user_id, book_title):
        """Create filename for book based on user_id and title"""
        trans_title = self.transliter.translite_text(book_title)
        trans_title = trans_title.replace(" ", "_").lower()
        filename = str(user_id) + '_' + trans_title
        return filename

    def _send_telegram_notification(self, chat_id, message, token):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
        try:
            import requests
            url = f"https://api.telegram.org/bot{token}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            response = requests.post(url, data=data)
            if response.status_code == 200:
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {message}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def process_book_from_queue(self, event, context):
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Message Queue
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –æ—Ç Message Queue
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç Message Queue: {event}")
            
            # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            if 'messages' in event:
                for message in event['messages']:
                    self._process_single_message(message)
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏—è: {event}")
                return {'statusCode': 400, 'body': 'Invalid event format'}
            
            return {'statusCode': 200, 'body': 'Processing completed'}
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback
            print(f"‚ùå Traceback: {traceback.format_exc()}")
            return {'statusCode': 500, 'body': f'Error: {str(e)}'}

    def _process_single_message(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if 'data' in message:
                message_data = json.loads(message['data'])
            else:
                print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {message}")
                return
            
            print(f"üì® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_data}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            user_id = message_data.get('user_id')
            chat_id = message_data.get('chat_id')
            epub_path = message_data.get('epub_path')
            sending_mode = message_data.get('sending_mode', 'by_sense')
            token = message_data.get('token')
            
            if not all([user_id, chat_id, epub_path, token]):
                print(f"‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {message_data}")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self._send_telegram_notification(
                chat_id, 
                f"üìö –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–∏–≥–∏...\n‚è±Ô∏è –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç", 
                token
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–∏–≥—É
            result = self._process_epub_completely(
                user_id, chat_id, epub_path, sending_mode, token
            )
            
            if result['success']:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                self._send_telegram_notification(
                    chat_id,
                    f"üéâ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!\nüìö –°–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {result['chunks_created']}\nüìñ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É –∫–æ–º–∞–Ω–¥–æ–π /more",
                    token
                )
            else:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ
                self._send_telegram_notification(
                    chat_id,
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–∏–≥–∏: {result['error']}",
                    token
                )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(epub_path):
                os.remove(epub_path)
                print(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {epub_path}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback
            print(f"‚ùå Traceback: {traceback.format_exc()}")

    def _process_epub_completely(self, user_id, chat_id, epub_path, sending_mode, token):
        """
        –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ EPUB —Ñ–∞–π–ª–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        """
        try:
            print(f"üìñ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É EPUB: {epub_path}")
            
            # –ß–∏—Ç–∞–µ–º EPUB —Ñ–∞–π–ª
            book_reader = EpubReader(epub_path)
            book_title = book_reader.get_booktitle()
            print(f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: {book_title}")
            
            if not book_title:
                return {'success': False, 'error': 'Could not extract book title from EPUB'}
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É –≤ –ë–î
            book_name = self._make_filename(user_id, book_title)
            book_id = self.db.get_or_create_book(book_name)
            
            if book_id is None:
                return {'success': False, 'error': f'Could not create book: {book_name}'}
            
            print(f"‚úÖ –ö–Ω–∏–≥–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {book_id}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–Ω–∏–≥–∏
            total_chunks_created = 0
            text_blocks_processed = 0
            empty_blocks_skipped = 0
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            total_items = len(book_reader.item_ids)
            print(f"üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_items}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self._send_telegram_notification(
                chat_id,
                f"üìä –ù–∞–π–¥–µ–Ω–æ {total_items} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\nüîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–±–∏–≤–∫—É –Ω–∞ —á–∞–Ω–∫–∏...",
                token
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            while True:
                text = book_reader.get_next_item_text()
                if text is None:
                    break
                
                if text.strip():
                    print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤...")
                    try:
                        chunks_created = self.chunk_manager.create_chunks(book_id, text, sending_mode)
                        total_chunks_created += chunks_created
                        text_blocks_processed += 1
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –±–ª–æ–∫–æ–≤
                        if text_blocks_processed % 10 == 0:
                            progress_percent = (text_blocks_processed / total_items) * 100
                            self._send_telegram_notification(
                                chat_id,
                                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {text_blocks_processed}/{total_items} ({progress_percent:.1f}%)\nüìö –°–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {total_chunks_created}",
                                token
                            )
                        
                        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–ª–æ–∫–æ–≤: {text_blocks_processed}, —Å–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {total_chunks_created}")
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞: {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–æ–≤
                else:
                    empty_blocks_skipped += 1
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –ø—É—Å—Ç–æ–π –±–ª–æ–∫ #{empty_blocks_skipped}")
            
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–ª–æ–∫–æ–≤: {text_blocks_processed}, —Å–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {total_chunks_created}, –ø—Ä–æ–ø—É—â–µ–Ω–æ –ø—É—Å—Ç—ã—Ö: {empty_blocks_skipped}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from books_library import BooksLibrary
            books_lib = BooksLibrary()
            books_lib.update_current_book(user_id, chat_id, book_id)
            books_lib.update_book_pos(user_id, book_id, 0)
            
            return {
                'success': True,
                'book_id': book_id,
                'chunks_created': total_chunks_created,
                'blocks_processed': text_blocks_processed
            }
            
        except Exception as e:
            print(f"‚ùå Error processing EPUB completely: {str(e)}")
            import traceback
            print(f"‚ùå Traceback: {traceback.format_exc()}")
            return {'success': False, 'error': str(e)}

