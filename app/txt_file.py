import os
import errno
from time import gmtime, strftime
from text_separator import TextSeparator
import config
from db_manager import DbManager

class BookChunkManager(object):
    """
    Class for managing book text chunks in YDB
    """

    def __init__(self):
        self.db = DbManager()
        self.chunk_size = config.piece_size

    def create_chunks(self, book_id, text, sent_mode):
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = TextSeparator(text, mode=sent_mode).get_sentences()
        print(f"üìù –ü–æ–ª—É—á–µ–Ω–æ {len(sentences)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —á–∞–Ω–∫–∏ –ø–æ 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        sentences_per_chunk = 5
        chunks_to_save = []
        
        for i in range(0, len(sentences), sentences_per_chunk):
            # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–∏–ª–∏ –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω–µ—Ü)
            chunk_sentences = sentences[i:i + sentences_per_chunk]
            current_chunk = ' '.join(chunk_sentences)
            
            if current_chunk.strip():
                chunks_to_save.append(current_chunk)
        
        # –ë–ê–¢–ß–ò–ù–ì: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        if chunks_to_save:
            try:
                chunks_created = self.db.save_chunks_batch(book_id, chunks_to_save)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {chunks_created} –Ω–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤ (–±–∞—Ç—á–∏–Ω–≥)")
                return chunks_created
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á–∏–Ω–≥–∞ —á–∞–Ω–∫–æ–≤: {e}")
                # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
                return self._create_chunks_legacy(book_id, chunks_to_save)
        
        return 0
    
    def _create_chunks_legacy(self, book_id, chunks_to_save):
        """Fallback –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        current_chunk_count = self.db.get_total_chunks(book_id)
        chunk_id = current_chunk_count
        chunks_created = 0
        
        for chunk in chunks_to_save:
            try:
                self.db.save_chunk(book_id, chunk_id, chunk)
                chunk_id += 1
                chunks_created += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞–Ω–∫–∞ {chunk_id}: {e}")
                break
        
        return chunks_created

    def read_piece(self, book_id, pos):
        # –ü–æ–ª—É—á–∞–µ–º —á–∞–Ω–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        chunk = self.db.get_chunk(book_id, pos)
        if chunk is None:
            return None, pos
        
        return chunk, pos + 1

    def get_total_chunks(self, book_id):
        return self.db.get_total_chunks(book_id)
