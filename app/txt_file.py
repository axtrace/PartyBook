import os
import errno
from time import gmtime, strftime
from text_separator import TextSeparator
import config
from db_manager import DbManager

class BookChunkManager(object):
    """
    Class for managing book text chunks in YDB
    """

    def __init__(self):
        self.db = DbManager()
        self.chunk_size = config.piece_size

    def create_chunks(self, book_id, text, sent_mode):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏
        current_chunk_count = self.db.get_total_chunks(book_id)
        print(f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ –¥–ª—è –∫–Ω–∏–≥–∏ {book_id}: {current_chunk_count}")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = TextSeparator(text, mode=sent_mode).get_sentences()
        print(f"üìù –ü–æ–ª—É—á–µ–Ω–æ {len(sentences)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —á–∞–Ω–∫–∏
        current_chunk = ""
        chunk_id = current_chunk_count  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        
        chunks_created = 0
        
        for sentence in sentences:
            if len(current_chunk) + len(sentence) > self.chunk_size:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫
                try:
                    self.db.save_chunk(book_id, chunk_id, current_chunk)
                    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —á–∞–Ω–∫ {chunk_id} –¥–ª–∏–Ω–æ–π {len(current_chunk)} —Å–∏–º–≤–æ–ª–æ–≤")
                    chunk_id += 1
                    chunks_created += 1
                    current_chunk = sentence
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞–Ω–∫–∞ {chunk_id}: {e}")
                    return chunks_created
            else:
                current_chunk += sentence
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
        if current_chunk:
            try:
                self.db.save_chunk(book_id, chunk_id, current_chunk)
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ {chunk_id} –¥–ª–∏–Ω–æ–π {len(current_chunk)} —Å–∏–º–≤–æ–ª–æ–≤")
                chunks_created += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞–Ω–∫–∞ {chunk_id}: {e}")
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {chunks_created} –Ω–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤")
        return chunks_created

    def read_piece(self, book_id, pos):
        # –ü–æ–ª—É—á–∞–µ–º —á–∞–Ω–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        chunk = self.db.get_chunk(book_id, pos)
        if chunk is None:
            return None, pos
        
        return chunk, pos + 1

    def get_total_chunks(self, book_id):
        return self.db.get_total_chunks(book_id)
