import os
import warnings
from bs4 import BeautifulSoup as bs, XMLParsedAsHTMLWarning
import ebooklib
from ebooklib import epub

# –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–∞—Ä—Å–∏–Ω–≥–µ XML –∫–∞–∫ HTML
warnings.filterwarnings("ignore", category=XMLParsedAsHTMLWarning)


class EpubReader():
    # reade text from epub file

    def __init__(self, epub_path=''):
        self.epub_path = epub_path
        if epub_path != '':
            self.book = epub.read_epub(epub_path)
            self.spine_ids = self._get_spine_ids()
            self.item_ids = self._get_item_ids()
            self.item_ids.sort(key=self._sort_by_spine) # sort list of docs ids in order they follow in spine_ids
        else:
            self.book = None
        pass

    def _get_item_ids(self):
        item_ids = []
        doc_item_list = self.book.get_items_of_type(ebooklib.ITEM_DOCUMENT)
        for elem in doc_item_list:
            item_ids.append(elem.id)
        return item_ids

    def _get_spine_ids(self):
        spine_ids = []
        for sp in self.book.spine:
            spine_ids.append(sp[0])
        return spine_ids

    def get_booktitle(self):
        if self.book is None:
            return ''
        return self.book.title

    def get_toc(self):
        # return table of content
        if self.book is None:
            return ''
        return self.book.toc

    def _sort_by_spine(self, item):
        # for sorting list of items by list of ids from spine.
        # epub readers read book in spine order
        if item not in self.spine_ids:
            return 0
        return self.spine_ids.index(item)

    def get_next_item_text(self):
        # return text of next item with type ITEM_DOCUMENT
        if len(self.item_ids) == 0:
            print("üìö –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–Ω–∏–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            return None
        
        try:
            item_id = self.item_ids.pop(0)
            print(f"üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç: {item_id}")
            item_doc = self.book.get_item_with_id(item_id)
            
            if item_doc is None:
                print(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return self.get_next_item_text()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            
            soup = bs(item_doc.content.decode('utf-8'), "xml")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ body, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - –∏–∑ –≤—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if soup.body:
                text = soup.body.get_text()
            else:
                text = soup.get_text()
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            text = ' '.join(text.split())
            
            if text.strip():
                print(f"üìÑ –ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {item_id}")
                return text
            else:
                print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤ —ç–ª–µ–º–µ–Ω—Ç–µ {item_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return self.get_next_item_text()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ {item_id}: {e}")
            return self.get_next_item_text()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
